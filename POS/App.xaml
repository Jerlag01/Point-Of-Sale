<Application x:Class="Pos.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:properties="clr-namespace:Pos.Properties"
             xmlns:converters="clr-namespace:Util.MicroMvvm.Converters;assembly=Util"
             xmlns:viewModels="clr-namespace:Pos.ViewModels"
             xmlns:newTicket="clr-namespace:Pos.Views.NewTicket"
             xmlns:msgbox="clr-namespace:Util.WpfMessageBox;assembly=Util">
    <Application.Resources>
        <converters:ImageConverter x:Key="ImageConverter"/>
        <converters:EnumBoolConverter x:Key="EnumBoolConverter"/>
        <DataTemplate DataType="{x:Type viewModels:TicketViewModel}">
            <newTicket:TicketControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type viewModels:TransactionViewModel}">
            <newTicket:TransactionControl/>
        </DataTemplate>
        <properties:Settings x:Key="Settings"/>
        <Style x:Key="buttonDefault" TargetType="{x:Type Control}">
            <Setter Property="Control.Foreground" Value="White"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Control.Background}">
                            <ContentPresenter/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="UIElement.IsEnabled" Value="false">
                    <Setter Property="UIElement.Opacity" Value="0.3"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="BlueButton" TargetType="{x:Type Button}" BasedOn="{StaticResource buttonDefault}">
            <Setter Property="Control.Background" Value="#FF00AEFF"/>
            <Style.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                    <Setter Property="Control.Background" Value="#FF008ED1"/>
                </Trigger>
                <Trigger Property="ButtonBase.IsPressed" Value="true">
                    <Setter Property="Control.Background" Value="#FF008ED1"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="OrangeButton" TargetType="{x:Type Button}" BasedOn="{StaticResource buttonDefault}">
            <Setter Property="Control.Background" Value="#FFEC7D0E"/>
            <Style.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                    <Setter Property="Control.Background" Value="#FFC96B0D"/>
                </Trigger>
                <Trigger Property="ButtonBase.IsPressed" Value="true">
                    <Setter Property="Control.Background" Value="#FFC96B0D"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="RedButton" TargetType="{x:Type Button}" BasedOn="{StaticResource buttonDefault}">
            <Setter Property="Control.Background" Value="Red"/>
            <Style.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                    <Setter Property="Control.Background" Value="#FFE00000"/>
                </Trigger>
                <Trigger Property="ButtonBase.IsPressed" Value="true">
                    <Setter Property="Control.Background" Value="#FFE00000"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ProductButton" TargetType="{x:Type Button}">
            <Setter Property="Control.FontSize" Value="18"/>
            <Setter Property="Control.Foreground" Value="Black"/>
            <Setter Property="Control.Background" Value="White"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Control.Background}">
                            <ContentPresenter/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="UIElement.IsEnabled" Value="false">
                    <Setter Property="UIElement.Opacity" Value="0.3"/>
                </Trigger>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                    <Setter Property="Control.Background" Value="#FF00AEFF"/>
                </Trigger>
                <Trigger Property="ButtonBase.IsPressed" Value="true">
                    <Setter Property="Control.Background" Value="#FF00AEFF"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ProductPlusButton" TargetType="{x:Type Button}">
            <Setter Property="Control.Background" Value="#FF476A87"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Control.Background}">
                            <ContentPresenter/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="UIElement.IsEnabled" Value="false">
                    <Setter Property="UIElement.Opacity" Value="0.3"/>
                </Trigger>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                    <Setter Property="Control.Background" Value="#FF00AEFF"/>
                </Trigger>
                <Trigger Property="ButtonBase.IsPressed" Value="true">
                    <Setter Property="Control.Background" Value="#FF00AEFF"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="CategoryPlusButton" TargetType="{x:Type Button}">
            <Setter Property="Control.Background" Value="#FFECBD8E"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Control.Background}">
                            <ContentPresenter/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                    <Setter Property="Control.Background" Value="#FF00AEFF"/>
                </Trigger>
                <Trigger Property="ButtonBase.IsPressed" Value="true">
                    <Setter Property="Control.Background" Value="#FF00AEFF"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="RadioButtonDefault" TargetType="{x:Type Control}">
            <Setter Property="Control.Foreground" Value="White"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Border Background="{TemplateBinding Control.Background}">
                            <ContentPresenter/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="UIElement.IsEnabled" Value="false">
                    <Setter Property="UIElement.Opacity" Value="0.3"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="OrangeRadioButton" TargetType="{x:Type RadioButton}"
           BasedOn="{StaticResource RadioButtonDefault}">
            <Setter Property="Control.Background" Value="#FF00AEFF"/>
            <Style.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                    <Setter Property="Control.Background" Value="#FFEC7D0E"/>
                </Trigger>
                <Trigger Property="ButtonBase.IsPressed" Value="true">
                    <Setter Property="Control.Background" Value="#FFEC7D0E"/>
                </Trigger>
                <Trigger Property="ToggleButton.IsChecked" Value="True">
                    <Setter Property="Control.Background" Value="#FFEC7D0E"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="CategoryRadioButton" TargetType="{x:Type RadioButton}"
           BasedOn="{StaticResource RadioButtonDefault}">
            <Setter Property="Control.Background" Value="#FFEC7D0E"/>
            <Setter Property="Control.FontSize" Value="18"/>
            <Style.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="false">
                    <Setter Property="Control.Background" Value="#FFEC9F53"/>
                </Trigger>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                    <Setter Property="Control.Background" Value="#FFEC7D0E"/>
                </Trigger>
                <Trigger Property="ButtonBase.IsPressed" Value="false">
                    <Setter Property="Control.Background" Value="#FFEC9F53"/>
                </Trigger>
                <Trigger Property="ButtonBase.IsPressed" Value="true">
                    <Setter Property="Control.Background" Value="#FFEC7D0E"/>
                </Trigger>
                <Trigger Property="ToggleButton.IsChecked" Value="False">
                    <Setter Property="Control.Background" Value="#FFEC9F53"/>
                </Trigger>
                <Trigger Property="ToggleButton.IsChecked" Value="True">
                    <Setter Property="Control.Background" Value="#FFEC7D0E"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ProductRadioButton" TargetType="{x:Type RadioButton}"
           BasedOn="{StaticResource RadioButtonDefault}">
            <Setter Property="Control.Background" Value="White"/>
            <Setter Property="Control.FontSize" Value="18"/>
            <Setter Property="Control.Foreground" Value="Black"/>
            <Style.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="false">
                    <Setter Property="Control.Background" Value="White"/>
                </Trigger>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                    <Setter Property="Control.Background" Value="#FF00AEFF"/>
                </Trigger>
                <Trigger Property="ButtonBase.IsPressed" Value="false">
                    <Setter Property="Control.Background" Value="White"/>
                </Trigger>
                <Trigger Property="ButtonBase.IsPressed" Value="true">
                    <Setter Property="Control.Background" Value="#FF00AEFF"/>
                </Trigger>
                <Trigger Property="ToggleButton.IsChecked" Value="False">
                    <Setter Property="Control.Background" Value="White"/>
                </Trigger>
                <Trigger Property="ToggleButton.IsChecked" Value="True">
                    <Setter Property="Control.Background" Value="#FF00AEFF"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="OrangeFlickerRadioButton" TargetType="{x:Type RadioButton}"
           BasedOn="{StaticResource RadioButtonDefault}">
            <Setter Property="Control.Background" Value="#FFEC7D0E"/>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="UIElement.IsMouseOver" Value="true"/>
                        <Condition Property="ToggleButton.IsChecked" Value="False"/>
                    </MultiTrigger.Conditions>
                    <MultiTrigger.Setters>
                        <Setter Property="Control.Background" Value="#FFC96B0D"/>
                    </MultiTrigger.Setters>
                </MultiTrigger>
                <Trigger Property="ToggleButton.IsChecked" Value="True">
                    <TriggerBase.EnterActions>
                        <BeginStoryboard>
                            <Storyboard RepeatBehavior="Forever" AutoReverse="true" Duration="0:0:0.5">
                                <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="Background.Color" Duration="0:0:0.5" RepeatBehavior="Forever">
                                    <ColorAnimationUsingKeyFrames.KeyFrames>
                                        <DiscreteColorKeyFrame KeyTime="0:0:0" Value="#FFB6620F"/>
                                        <DiscreteColorKeyFrame KeyTime="0:0:0.25" Value="#FFEC7D0E"/>
                                    </ColorAnimationUsingKeyFrames.KeyFrames>
                                </ColorAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard>
                    </TriggerBase.EnterActions>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="UIElement.IsMouseOver" Value="false"/>
                        <Condition Property="ToggleButton.IsChecked" Value="False"/>
                    </MultiTrigger.Conditions>
                    <MultiTrigger.Setters>
                        <Setter Property="Control.Background" Value="#FFEC7D0E"/>
                    </MultiTrigger.Setters>
                </MultiTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="MenuListboxItem" TargetType="{x:Type ListBoxItem}">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        </Style>
        <Style x:Key="MenuListbox" TargetType="{x:Type ListBox}">
            <Setter Property="Control.BorderBrush" Value="Transparent"/>
            <Setter Property="Control.BorderThickness" Value="0"/>
            <Setter Property="Control.Padding" Value="-1,-1,-1,-1"/>
            <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="ItemsControl.ItemTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <RadioButton Style="{StaticResource CategoryRadioButton}" Height="50" Margin="4,2,4,2"
                         IsChecked="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}, Path=IsSelected}">
                            <TextBlock TextWrapping="Wrap" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="20,0,0,0"
                         FontSize="20" FontWeight="Bold" Text="{Binding}"/>
                        </RadioButton>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource MenuListboxItem}"/>
        </Style>
        <Style x:Key="DarkTextBox" TargetType="{x:Type TextBox}">
            <Setter Property="Control.FontSize" Value="20"/>
            <Setter Property="Control.Foreground" Value="White"/>
            <Setter Property="FrameworkElement.Margin" Value="2"/>
            <Setter Property="Control.Background" Value="#FF102942"/>
            <Setter Property="Control.BorderThickness" Value="1"/>
            <Setter Property="Control.BorderBrush" Value="#FF091725"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBoxBase}">
                        <Border Background="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}">
                            <ScrollViewer x:Name="PART_ContentHost" Background="{TemplateBinding Control.Background}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="DarkDatePicker" TargetType="{x:Type DatePicker}">
            <Setter Property="Control.FontSize" Value="20"/>
            <Setter Property="Control.Foreground" Value="Black"/>
            <Setter Property="FrameworkElement.Margin" Value="2"/>
            <Setter Property="Control.Background" Value="#FF102942"/>
            <Setter Property="Control.BorderThickness" Value="1"/>
            <Setter Property="Control.BorderBrush" Value="#FF091725"/>
        </Style>
        <Style x:Key="TicketText" TargetType="{x:Type TextBlock}">
            <Setter Property="TextBlock.Foreground" Value="Black"/>
            <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
            <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
            <Setter Property="TextBlock.FontSize" Value="16"/>
            <Setter Property="TextBlock.FontWeight" Value="Bold"/>
        </Style>
        <Style x:Key="TransactionText" TargetType="{x:Type TextBlock}">
            <Setter Property="TextBlock.Foreground" Value="Black"/>
            <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
            <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
            <Setter Property="TextBlock.FontSize" Value="16"/>
        </Style>
        <Style x:Key="WhiteText" TargetType="{x:Type TextBlock}">
            <Setter Property="TextBlock.FontSize" Value="20"/>
            <Setter Property="TextBlock.Foreground" Value="White"/>
            <Setter Property="FrameworkElement.Margin" Value="4"/>
        </Style>
        <SolidColorBrush x:Key="ComboBoxNormalBorderBrush" Color="#FF091725"/>
        <SolidColorBrush x:Key="ComboBoxNormalBackgroundBrush" Color="#FF102942"/>
        <SolidColorBrush x:Key="ComboBoxDisabledForegroundBrush" Color="#888"/>
        <SolidColorBrush x:Key="ComboBoxDisabledBackgroundBrush" Color="#eee"/>
        <SolidColorBrush x:Key="ComboBoxDisabledBorderBrush" Color="#888"/>
        <ControlTemplate x:Key="ComboBoxToggleButtonTemplate" TargetType="{x:Type ToggleButton}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="20"/>
                </Grid.ColumnDefinitions>
                <Border Name="Border" Grid.ColumnSpan="2" BorderBrush="{StaticResource ComboBoxNormalBorderBrush}"
                CornerRadius="0" BorderThickness="1, 1, 1, 1"
                Background="{StaticResource ComboBoxNormalBackgroundBrush}"/>
                <Border Name="ButtonBorder" Grid.Column="1" Margin="1, 1, 1, 1" BorderBrush="#444"
                CornerRadius="0, 0, 0, 0" BorderThickness="0, 0, 0, 0"
                Background="{StaticResource ComboBoxNormalBackgroundBrush}"/>
                <Path Name="Arrow" Grid.Column="1" Data="M 0,0 L 0,2 4,6 8,2 8,0 4,4 Z" HorizontalAlignment="Center"
              Fill="#444" VerticalAlignment="Center"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                    <Setter TargetName="ButtonBorder" Property="Panel.Background" Value="WhiteSmoke"/>
                </Trigger>
                <Trigger Property="ToggleButton.IsChecked" Value="True">
                    <Setter TargetName="ButtonBorder" Property="Panel.Background" Value="WhiteSmoke"/>
                    <Setter TargetName="Arrow" Property="Shape.Fill" Value="#FF8D979E"/>
                </Trigger>
                <Trigger Property="UIElement.IsEnabled" Value="false">
                    <Setter TargetName="Border" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"
                  Property="Panel.Background"/>
                    <Setter TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"
                  Property="Panel.Background"/>
                    <Setter TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBorderBrush}"
                  Property="Border.BorderBrush"/>
                    <Setter Value="{StaticResource ComboBoxDisabledForegroundBrush}" Property="TextElement.Foreground"/>
                    <Setter TargetName="Arrow" Property="Shape.Fill" Value="#999"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="ComboBoxFlatStyle" TargetType="{x:Type ComboBox}">
            <Setter Property="Control.FontSize" Value="20"/>
            <Setter Property="Control.Foreground" Value="White"/>
            <Setter Property="FrameworkElement.Margin" Value="2"/>
            <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
            <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="TextElement.Foreground" Value="White"/>
            <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid>
                            <ToggleButton Name="ToggleButton" Grid.Column="2" ClickMode="Press" Focusable="false"
                            Template="{StaticResource ComboBoxToggleButtonTemplate}"
                            IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
                            <ContentPresenter Name="ContentSite" Margin="5, 3, 23, 3" IsHitTestVisible="false" HorizontalAlignment="Left"
                                VerticalAlignment="Center" Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                                ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"/>
                            <TextBox Name="PART_EditableTextBox" Margin="3, 3, 23, 3" IsReadOnly="{TemplateBinding ComboBox.IsReadOnly}"
                       Visibility="Hidden" Background="Transparent" HorizontalAlignment="Left" VerticalAlignment="Center"
                       Focusable="true">
                                <Control.Template>
                                    <ControlTemplate TargetType="{x:Type TextBox}">
                                        <Border Name="PART_ContentHost" Focusable="false"/>
                                    </ControlTemplate>
                                </Control.Template>
                            </TextBox>
                            <Popup Name="Popup" Placement="Bottom" Focusable="false" AllowsTransparency="true"
                     IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}" PopupAnimation="Slide">
                                <Grid Name="DropDown" SnapsToDevicePixels="true"
                      MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                      MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                                    <Border Name="DropDownBorder" Background="{StaticResource ComboBoxNormalBackgroundBrush}"
                          Margin="0, 1, 0, 0" CornerRadius="0" BorderThickness="1,1,1,1"
                          BorderBrush="{StaticResource ComboBoxNormalBorderBrush}"/>
                                    <ScrollViewer Margin="4" SnapsToDevicePixels="true">
                                        <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"/>
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="ItemsControl.HasItems" Value="false">
                                <Setter TargetName="DropDownBorder" Property="FrameworkElement.MinHeight" Value="95"/>
                            </Trigger>
                            <Trigger Property="UIElement.IsEnabled" Value="false">
                                <Setter Value="{StaticResource ComboBoxDisabledForegroundBrush}" Property="TextElement.Foreground"/>
                            </Trigger>
                            <Trigger Property="ItemsControl.IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </Trigger>
                            <Trigger Property="ComboBox.IsEditable" Value="true">
                                <Setter Property="KeyboardNavigation.IsTabStop" Value="false"/>
                                <Setter TargetName="PART_EditableTextBox" Property="UIElement.Visibility" Value="Visible"/>
                                <Setter TargetName="ContentSite" Property="UIElement.Visibility" Value="Hidden"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type msgbox:WPFMessageBoxControl}">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type msgbox:WPFMessageBoxControl}">
                        <Grid Height="1024" Width="1280" FlowDirection="{Binding ContentFlowDirection}">
                            <Panel.Background>
                                <SolidColorBrush Color="Black" Opacity="0.7"/>
                            </Panel.Background>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition MinHeight="200"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Border Grid.Row="1" Background="#171717">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="50"/>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="50"/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="200"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="200"/>
                                    </Grid.ColumnDefinitions>
                                    <Image Grid.Column="0" Grid.Row="1" HorizontalAlignment="Right" VerticalAlignment="Top" Height="32"
                         Width="32" Margin="0,10,0,0" Source="{Binding MessageImageSource}"/>
                                    <StackPanel Grid.Column="1" Grid.Row="1" Orientation="Vertical">
                                        <StackPanel Orientation="Vertical" VerticalAlignment="Top" HorizontalAlignment="Left">
                                            <TextBlock FontSize="24" Foreground="White" TextWrapping="Wrap" TextAlignment="Left" VerticalAlignment="Top"
                                 Margin="10 10 10 10" Text="{Binding Title}" HorizontalAlignment="{Binding ContentTextAlignment}"/>
                                            <TextBlock FontSize="16" Foreground="White" TextWrapping="Wrap" TextAlignment="Left" VerticalAlignment="Top"
                                 Margin="10 10 10 10" Text="{Binding Message}" HorizontalAlignment="{Binding ContentTextAlignment}"/>
                                        </StackPanel>
                                        <StackPanel Height="30"/>
                                        <StackPanel Orientation="Horizontal" VerticalAlignment="Bottom" HorizontalAlignment="Right">
                                            <Button Style="{StaticResource BlueButton}" Margin="5,5,5,5" Height="90" Width="90"
                              Visibility="{Binding YesNoVisibility}" Command="{Binding YesCommand}"
                              IsDefault="{Binding IsYesDefault}">
                                                <Grid>
                                                    <Image HorizontalAlignment="Center" VerticalAlignment="Top" Height="50" Width="50" Margin="15"
                                 Source="Views/../Resources\ok.png"/>
                                                    <TextBlock HorizontalAlignment="Center" TextAlignment="Center" VerticalAlignment="Bottom" Padding="7"
                                     Width="70">Yes</TextBlock>
                                                </Grid>
                                            </Button>
                                            <Button Style="{StaticResource RedButton}" Margin="5,5,5,5" Height="90" Width="90"
                              Visibility="{Binding YesNoVisibility}" Command="{Binding NoCommand}"
                              IsDefault="{Binding IsNoDefault}">
                                                <Grid>
                                                    <Image HorizontalAlignment="Center" VerticalAlignment="Top" Height="50" Width="50" Margin="15"
                                 Source="Views/../Resources\cancel.png"/>
                                                    <TextBlock HorizontalAlignment="Center" TextAlignment="Center" VerticalAlignment="Bottom" Padding="7"
                                     Width="70">No</TextBlock>
                                                </Grid>
                                            </Button>
                                            <Button Style="{StaticResource BlueButton}" Margin="5,5,5,5" Height="90" Width="90"
                              Visibility="{Binding OkVisibility}" Command="{Binding OkCommand}" IsDefault="{Binding IsOkDefault}">
                                                <Grid>
                                                    <Image HorizontalAlignment="Center" VerticalAlignment="Top" Height="50" Width="50" Margin="15"
                                 Source="Views/../Resources\ok.png"/>
                                                    <TextBlock HorizontalAlignment="Center" TextAlignment="Center" VerticalAlignment="Bottom" Padding="7"
                                     Width="70">OK</TextBlock>
                                                </Grid>
                                            </Button>
                                            <Button Style="{StaticResource OrangeButton}" Margin="5,5,5,5" Height="90" Width="90"
                              Visibility="{Binding CancelVisibility}" Command="{Binding CancelCommand}"
                              IsDefault="{Binding IsCancelDefault}">
                                                <Grid>
                                                    <Image HorizontalAlignment="Center" VerticalAlignment="Top" Height="50" Width="50" Margin="15"
                                 Source="Views/../Resources\cancel2.png"/>
                                                    <TextBlock HorizontalAlignment="Center" TextAlignment="Center" VerticalAlignment="Bottom" Padding="7"
                                     Width="70">Cancel</TextBlock>
                                                </Grid>
                                            </Button>
                                        </StackPanel>
                                    </StackPanel>
                                </Grid>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Application.Resources>
</Application>